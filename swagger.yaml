openapi: 3.0.0
info:
  description: Sample API for Universal QR Codes
  version: "1.0.1"
  title: Universal QR Code API
  contact:
    email: eli@nabis.com, matt.carter@nabis.com
tags:
  - name: collection
    description: Information and updating of collections
  - name: skubatch
    description: Information and updating skubatches
  - name: sku
    description: Information about sku details
paths:
  /collection/{id}:
    get:
      tags:
        - collection
      summary: get info about a collection
      operationId: getCollectionById
      description: returns details for a collection
      parameters:
        - in: path
          name: id
          description: id of record to look up
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful lookup
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collection"
        "400":
          description: bad input parameter
        "404":
          description: could not find a collection with that id
    put:
      tags:
        - collection
      summary: update a collection's values
      operationId: updateCollection
      parameters:
        - in: path
          name: id
          description: id of record to update
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CollectionInput"
      responses:
        "200":
          description: collection updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collection"

  /collection/:
    post:
      tags:
        - collection
      summary: adds a new collection
      operationId: addCollection
      responses:
        "201":
          description: collection created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collection"
        "400":
          description: "invalid input, object invalid"
        "409":
          description: "an existing collection already exists"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CollectionInput"
        description: Collection to create

  /collection/search:
    get:
      tags:
        - collection
      parameters:
        - in: query
          name: identifier
          schema:
            type: string
          description: Search by the identifier of a collection
        - in: query
          name: collectionType
          schema:
            $ref: "#/components/schemas/CollectionType"
      responses:
        "200":
          description: "Collections that match the search"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Collection"

  /skubatch/{id}:
    get:
      tags:
        - skubatch
      parameters:
        - in: path
          name: id
          description: id of record to look up
          required: true
          schema:
            type: string
      responses:
        "200":
          description: skubatch matching input id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SkuBatch"
    put:
      tags:
        - skubatch
      parameters:
        - in: path
          name: id
          description: id of record to update
          required: true
          schema:
            type: string
      requestBody:
        description: All parameters in requestBody are optional
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SkuBatch"
      responses:
        "200":
          description: updated skubatch
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SkuBatch"
  /sku/{id}:
    get:
      tags:
        - sku
      parameters:
        - in: path
          name: id
          description: id of record to look up
          required: true
          schema:
            type: string
      responses:
        "200":
          description: sku matching input identifier
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Sku"
components:
  schemas:
    CollectionType:
      type: string
      enum: ["batch", "case", "regulator"]
      description: The type of collection, can be batch, case or regulator
    UuidArray:
      type: array
      items:
        type: string
        format: uuid
    BaseCollectionFields:
      type: object
      required:
        - identifier
        - name
        - collectionType
      properties:
        identifier:
          type: string
          description: Metrc Id / Batch Id / Case Id
        name:
          type: string
          description: Name for your collection
        collectionType:
          $ref: "#/components/schemas/CollectionType"
    CollectionSkuBatchesArray:
      type: object
      properties:
        skubatches:
          type: array
          items:
            $ref: "#/components/schemas/UuidArray"
    CollectionIdCreatedAt:
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdDate:
          type: string
          format: date-time
    CollectionNoSkuBatchesArray:
      type: object
      required:
        - identifier
        - skubatches
        - name
      allOf:
        - $ref: "#/components/schemas/BaseCollectionFields"
        - $ref: "#/components/schemas/CollectionIdCreatedAt"

    CollectionInput:
      type: object
      allOf:
        - $ref: "#/components/schemas/BaseCollectionFields"
        - $ref: "#/components/schemas/CollectionSkuBatchesArray"

    Collection:
      type: object
      allOf:
        - $ref: "#/components/schemas/BaseCollectionFields"
        - $ref: "#/components/schemas/CollectionSkuBatchesArray"
        - $ref: "#/components/schemas/CollectionIdCreatedAt"

    SkuBatchInput:
      required:
        - skuId
        - defaultLabTestingState
        - approvalStatus
        - approvalStatusDateTime
      properties:
        skuId:
          type: string
          format: uuid
        defaultLabTestingState:
          type: string
          enum: [ "NotSubmitted" ]
          description: Uses same name as Metrc DefaultLabTestingState
        approvalStatus:
          type: string
          enum: [ "Approved" ]
          description: Uses same name as Metrc ApprovalStatus
        approvalStatusDateTime:
          type: string
          format: date-time
          description: Uses same name as Metrc ApprovalStatusDateTime
        unitCbdPercent:
          type: number
          format: float
          nullable: true
          description: Uses same name as Metrc UnitCbdPercentage
        unitCbdContent:
          type: number
          format: float
          nullable: true
          description: Uses same name as Metrc UnitCbdContent
        unitCbdContentUnitOfMeasureName:
          type: string
          nullable: true
          enum: [ "Each" ]
          description: Uses same name as Metrc UnitCbdContentUnitOfMeasureName
        unitCbdContentDose:
          type: string
          nullable: true
          description: Uses same name as Metrc UnitCbdContentDose
        unitCbdContentDoseUnitOfMeasureName:
          type: string
          nullable: true
          enum: [ "Each" ]
          description: Uses same name as Metrc UnitCbdContentDoseUnitOfMeasureName
        unitTchPercent:
          type: number
          format: float
          nullable: true
          description: Uses same name as Metrc UnitThcPercent
        unitThcContent:
          type: number
          format: float
          nullable: true
          description: Uses same name as Metrc UnitThcContent
        unitThcContentUnitOfMeasureName:
          type: string
          nullable: true
          enum: [ "Each" ]
          description: Uses same name as Metrc UnitThcContentUnitOfMeasureName
        unitThcContentDose:
          type: string
          nullable: true
          description: Uses same name as Metrc UnitThcContentDose
        unitThcContentDoseUnitOfMeasureName:
          type: string
          nullable: true
          enum: [ "Each" ]
          description: Uses same name as Metrc UnitThcContentDoseUnitOfMeasureName
      type: object

    Sku:
      required:
        - id
        - name
        - strainId
        - strainName
        - productCategoryName
        - productCategoryType
        - quantityType
        - publicIngredients
        - description
        - isUsed
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: Kush OG
        strainId:
          type: number
          description: Uses same name as Metrc StrainId
        strainName:
          type: string
          description: Uses same name as Metrc StrainName
        productCategoryName:
          type: string
          enum: [
              "Pre-Roll Flower",
              "Flower (packaged eight - each",
              "Flower (packaged - each)",
              "Vape Cartridge (weight - each)",
              "Other Concentrate (weight - each)",
              "Edible (volume - each)",
              "Tincture (volume - each)"
          ]
          description: Uses same name as Metrc ProductCategoryName
        productCategoryType:
          type: string
          enum: [ "Buds", "Concentrate", "InfusedEdible" ]
          description: Uses same name as Metrc ProductCategoryType
        quantityType:
          type: string
          enum: [ "WeightBased", "CountBased" ]
          description: Uses same name as Metrc QuantityType
        administrationMethod:
          type: string
          nullable: true
          enum: [ "" ]
          description: Uses same name as Metrc AdministrationMethod
        publicIngredients:
          type: string
          nullable: true
          description: Uses same name as Metrc PublicIngredients
        description:
          type: string
          nullable: true
          description: Uses same name as Metrc Description
        unitOfMeasureName:
          type: string
          enum: [ "Ounces", "Each" ]
          description: Uses same name as Metrc UnitOfMeasureName
        unitVolume:
          type: number
          format: float
          nullable: true
          description: Uses same name as Metrc UnitVolume
        unitVolumeUnitOfMeasureName:
          type: string
          nullable: true
          enum: [ "Each" ]
          description: Uses same name as Metrc UnitVolumeUnitOfMeasureName
        unitWeight:
          type: number
          format: float
          nullable: true
          description: Uses same name as Metrc UnitWeight
        unitWeightUnitOfMeasureName:
          type: string
          nullable: true
          enum: [ "Each" ]
          description: Uses same name as Metrc UnitWeightUnitOfMeasureName
        servingSize:
          type: string
          nullable: true
          description: Uses same name as Metrc ServingSize
        supplyDurationDays:
          type: number
          format: integer
          nullable: true
          description: Uses same name as Metrc SupplyDurationDays
        nubmerOfDoses:
          type: number
          format: float
          nullable: true
          description: Uses same name as Metrc NumberOfDoses
        unitQuantity:
          type: integer
          nullable: true
          description: Uses same name as Metrc UnitQuantity
        unitQuantityUnitOfMeasure:
          type: string
          nullable: true
          enum: [ "Each" ]
          description: Uses same name as Metrc UnitQuantityUnitOfMeasureName
        isUsed:
          type: boolean
          description: Uses same name as Metrc IsUsed
      type: object
