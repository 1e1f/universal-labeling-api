openapi: 3.0.0
info:
  description: Sample API for Universal QR Codes
  version: 1.0.1
  title: Universal QR Code API
  contact:
    email: eli@nabis.com
    url: matt.carter@nabis.com
tags:
  - name: endpoint
    description: Get the endpoint for the universal API from a QR code URL
  - name: product
    description: Information about product details like product name, description, doses, etc
  - name: batch
    description: Information about batch details like testing and THC content
  - name: case
    description: Information and updating a case an item is a part of
  - name: each
    description: Information and updating a serialized package - single unit of a skuId
  - name: regulator
    description: Query for details about regulator tags
security:
  - ApiKeyAuth:
      - write
servers:
  - url: https://qr.example.com/v1/uapi
    description: Server for your universal API

paths:
  /uapi/endpoint:
    get:
      description:
        "URL to get the hostname from a QR code label - potentially hosted on a different server.
        This endpoint should also provide the vendor for the label,
        in order to assist in developers matching their API tokens to the correct endpoints.

        For example, if you were to make a request to qr.nabis.com/uapi/endpoint, we would respond with an endpoint of qrApi.nabis.com/uapi/v1/
        as well as a vendor tag of nabis, allowing a developer to easily match their stored API keys to our endpoint."
      tags:
        - endpoint
      servers:
        - url: https://shortqrurl.com/
      responses:
        200:
          description: The base url for the API
          content:
            application/json:
              schema:
                type: object
                properties:
                  endpoint:
                    type: string
                    example: qr.example.com/uapi/v1/
                  vendor:
                    type: string
                    enum: ["nabis", "lucid", "chroma"]
                    example: nabis
  /batch/{id}:
    get:
      tags:
        - batch
      parameters:
        - in: path
          name: id
          description: id of record to look up
          required: true
          schema:
            type: string
      responses:
        200:
          description: Get information about the batch from either a Collection id or an Each id
          content:
            application/json:
              schema:
                $ref: ./schemas/Batch.yaml

  /product/{id}:
    get:
      tags:
        - product
      parameters:
        - in: path
          name: id
          description: id of record to look up
          required: true
          schema:
            type: string
      responses:
        200:
          description: sku matching input identifier
          content:
            application/json:
              schema:
                $ref: ./schemas/Product.yaml

  /case/{id}:
    get:
      tags:
        - case
      parameters:
        - $ref: "#/components/parameters/pathId"
      responses:
        200:
          description: Case matching input Id
          content:
            application/json:
              schema:
                $ref: ./schemas/Case.yaml
    put:
      tags:
        - case
      parameters:
        - $ref: "#/components/parameters/pathId"
      requestBody:
        $ref: "#/components/requestBodies/regulatorBody"
      responses:
        200:
          description: Case matching input id
          content:
            application/json:
              schema:
                $ref: ./schemas/Case.yaml
  /each/{id}:
    get:
      tags:
        - each
      parameters:
        - in: path
          name: id
          description: id of Each to look up
          required: true
          schema:
            type: string
      responses:
        200:
          description: Each matching input id
          content:
            application/json:
              schema:
                $ref: ./schemas/Each.yaml
    put:
      tags:
        - each
      parameters:
        - $ref: "#/components/parameters/pathId"
      requestBody:
        $ref: "#/components/requestBodies/regulatorBody"
      responses:
        200:
          description: Each matching input id
          content:
            application/json:
              schema:
                $ref: ./schemas/Each.yaml
  /regulator/{id}/:
    get:
      tags:
        - regulator
      parameters:
        - $ref: "#/components/parameters/pathId"
      responses:
        200:
          $ref: "#/components/responses/eachesAndCasesResponse"
    put:
      tags:
        - regulator
      parameters:
        - $ref: "#/components/parameters/pathId"
      requestBody:
        $ref: "#/components/requestBodies/regulatorMultiputBody"
      responses:
        200:
          description: Returns the regulator event that was attached to these items, fails if the items are not all from the same parent
          content:
            application/json:
              schema:
                $ref: ./schemas/Regulator.yaml
        404:
          description: Returned if not all ids were able to be attached, this indicates an error in the tagging Flower"
          content:
            application/json:
              schema:
                type: object
                properties:
                  failures:
                    $ref: ./schemas/IdArray.yaml

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: "header"
      name: "api-token"
      description: Any users may generate an api token from their account page on the respective labeling site
  schemas:
    $ref: schemas/_index.yaml
  parameters:
    pathId:
      in: path
      name: id
      description: id of Each to look up
      required: true
      schema:
        type: string
  requestBodies:
    regulatorBody:
      description: Body for a put / post with regulator information
      content:
        application/json:
          schema:
            oneOf:
              - $ref: ./schemas/Regulator.yaml
    regulatorMultiputBody:
      description: Body for a request to put a regulator id on multiple items
      content:
        application/json:
          schema:
            type: object
            properties:
              ids:
                $ref: ./schemas/IdArray.yaml

  responses:
    eachesAndCasesResponse:
      description: Array of eaches, cases, and regualator events associated with a regulatorId
      content:
        application/json:
          schema:
            type: object
            properties:
              eaches:
                type: array
                items:
                  $ref: ./schemas/IdArray.yaml
              cases:
                type: array
                items:
                  $ref: ./schemas/IdArray.yaml
              regulatorEvents:
                type: array
                items:
                  $ref: ./schemas/Regulator.yaml
